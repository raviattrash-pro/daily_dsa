import java.util.*;

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        return new AbstractList<List<Integer>>() {
            int[] ele = null;
            Integer s = null;
            
            @Override
            public int size(){
                if (s==null) {
                    s = (int)(factorier(n) /(factorier(k) * factorier(n-k)));
                }
                //System.out.println("size:"+s);
                return s.intValue();
            }
            private static long factorier(int n){
                long fact = 1;
                for (int i=1;i<=n;i++)
                    fact = fact * i;
                return fact;
            }
            
            @Override
            public List<Integer> get(int index) {
                if (ele == null) {
                    ele = new int[k];
                    for (int i=0; i<k; i++) {
                        ele[i]=i+1;
                    }
                } else {
                    int i = k-1;
                    ele[i]++;
                    //System.out.println("n:"+n);
                    while (ele[i]>n-(k-i-1)){
                        i--;
                        ele[i]++;
                    }
                    // if (i<0 || n-ele[i]>k-i) {
                    //     return null;
                    // }
                    for(i=i+1;i<k;i++) {
                        ele[i] = ele[i-1]+1;
                    }
                }

                List<Integer> result = new ArrayList<Integer>(k);
                for (int j=0;j<k;j++)
                    result.add(ele[j]);
                return result;
            }
        };
    }
}