Sorting =>
________________________________________________________________________________________________________________ 
1. bubble sort => compare one and next element


Start at the first element.
Compare the current element with the next element.
If the current element is greater, swap them.
Move to the next element and repeat steps 2–3.
After each full pass, the largest element "bubbles up" to the end.
Repeat the process for the remaining unsorted part of the list.


for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i] > nums[j]){
                    int temp = nums[i];
                    nums[i] = nums[j];
                    nums[j]= temp;
                }
            }
        }
________________________________________________________________________________________________________________		

2. Selection sort =>  find minimum index and swap number accordingly

Start with the first position.
Find the smallest element in the unsorted part of the array.
Swap it with the element at the current position.
Move to the next position and repeat steps 2–3 until the entire array is sorted.

 for(int i=0;i<arr.length;i++){
			int min_index = i;//change to i
			
			for(int j=i+1;j<arr.length;j++){
				if(arr[min_index] > arr[j]){
					min_index = j;
				}
			}
			
			int temp = arr[min_index];
			arr[min_index] = arr[i];
			arr[i] = temp;
		}
________________________________________________________________________________________________________________

3. Insertion sort => insert the minimum element first

Start from the second element (index 1).
Compare it with the elements before it.
Shift larger elements one position to the right.
Insert the current element at the correct position.

public class MergeSortExample {

    public void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;

            // Sort first and second halves
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);

            // Merge the sorted halves
            merge(arr, left, mid, right);
        }
    }

    public void merge(int[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        int[] L = new int[n1];
        int[] R = new int[n2];

        // Copy data to temp arrays
        for (int i = 0; i < n1; i++) L[i] = arr[left + i];
        for (int j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];

        int i = 0, j = 0, k = left;

        // Merge the temp arrays back into arr
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k++] = L[i++];
            } else {
                arr[k++] = R[j++];
            }
        }

        // Copy remaining elements of L[]
        while (i < n1) arr[k++] = L[i++];

        // Copy remaining elements of R[]
        while (j < n2) arr[k++] = R[j++];
    }

    public static void main(String[] args) {
        MergeSortExample ms = new MergeSortExample();
        int[] arr = {38, 27, 43, 3, 9, 82, 10};

        ms.mergeSort(arr, 0, arr.length - 1);

        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}

int n = arr.length;
        
        for (int i = 1; i < n; i++) {
            int key = arr[i];
            int j = i - 1;

            // Move elements greater than key to one position ahead
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
		
_________________________________________________________________________________________________________________

4. Merge Sort: Split the array into two halves until each half has one element (base case)
				->Recursively sort each half.
				->Merge the sorted halves back together into a single sorted array.
	

public void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;

            // Sort first and second halves
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);

            // Merge the sorted halves
            merge(arr, left, mid, right);
        }
    }

    public void merge(int[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        int[] L = new int[n1];
        int[] R = new int[n2];

        // Copy data to temp arrays
        for (int i = 0; i < n1; i++) L[i] = arr[left + i];
        for (int j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];

        int i = 0, j = 0, k = left;

        // Merge the temp arrays back into arr
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k++] = L[i++];
            } else {
                arr[k++] = R[j++];
            }
        }

        // Copy remaining elements of L[]
        while (i < n1) arr[k++] = L[i++];

        // Copy remaining elements of R[]
        while (j < n2) arr[k++] = R[j++];
    }



Divide Step:
Every time you split the array, you cut it in half →
log₂(n) levels of recursion.

Merge Step:
At each level, you merge all n elements.
Merging two halves takes O(n) time.
Number of levels (splits): log₂(n)
Work per level (merge): O(n)

Total = O(n) × O(log n) = O(n log n)	