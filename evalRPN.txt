/*
class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();

        for (String token : tokens) {
            // If token is an operator, pop two operands
            if (token.equals("+") || token.equals("-") || 
                token.equals("*") || token.equals("/")) {

                int b = stack.pop(); // second operand
                int a = stack.pop(); // first operand

                int result = 0;
                switch (token) {
                    case "+": result = a + b; break;
                    case "-": result = a - b; break;
                    case "*": result = a * b; break;
                    case "/": result = a / b; break; // Integer division
                }

                stack.push(result); // push result back on stack
            } else {
                // If it's a number, push onto stack
                stack.push(Integer.parseInt(token));
            }
        }

        return stack.pop(); // Final result
    }
}
*/

class Solution {
    int i;
    public int evalRPN(String[] tokens) {
        i = tokens.length;
        return eval(tokens);
    }
    public int eval(String[] tokens) {
        String currentString = tokens[--i];
        int k = 0, num = 0, sign = 1;
        char s = currentString.charAt(0);
        if (currentString.length() == 1) {
            switch (s) {
                case '+':
                    return eval(tokens) + eval(tokens);
                case '-':
                    return -eval(tokens) + eval(tokens);
                case '*':
                    return eval(tokens) * eval(tokens);
                case '/':
                    int second = eval(tokens);
                    int first = eval(tokens);
                    return first / second;
                default:
                    return s - '0';
            }
        }
        else {
            if (s == '-') {
                sign = -1;
                k++;
            }
            while (k < currentString.length()) {
                s = currentString.charAt(k++);
                num = num * 10 + s - '0';
            }
            return num * sign;
        }
    }
}