class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null || k == 0) return head;
        
        // Step 1: find length and tail
        int n = 1; 
        ListNode tail = head;
        while (tail.next != null) {
            tail = tail.next;
            n++;
        }
        
        // Step 2: make it circular
        tail.next = head;
        
        // Step 3: compute effective rotations
        k = k % n;
        int stepsToNewHead = n - k;
        
        // Step 4: find new tail
        ListNode newTail = tail;
        while (stepsToNewHead-- > 0) {
            newTail = newTail.next;
        }
        
        // Step 5: break circle
        ListNode newHead = newTail.next;
        newTail.next = null;
        
        return newHead;
    }
}
