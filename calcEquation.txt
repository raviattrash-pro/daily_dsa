class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {

        //mapping node(string) -> node(integer)
        Map<String,Integer> node=new HashMap<>();
        int cur=0;
        for(List<String> x: equations){
            String y=x.get(0);
            String z=x.get(1);
            if(!node.containsKey(y)){
                node.put(y,cur);
                cur++;
            }
            if(!node.containsKey(z)){
                node.put(z,cur);
                cur++;
            }
        }

        //setting up graph
        double[][] graph=new double[cur][cur];
        for(int i=0; i<cur; i++){
            for(int j=0; j<cur; j++) graph[i][j]=-1;
        }
        for(int i=0; i<values.length; i++){
            List<String> edge=equations.get(i);
            int a=node.get(edge.get(0));
            int b=node.get(edge.get(1));
            // System.out.println(edge.get(0)+" "+a);
            // System.out.println(edge.get(1)+" "+b);
            graph[a][b] = values[i];
            graph[b][a] = 1/values[i];
        }

        // for(int i=0; i<cur; i++){
        //     for(int j=0; j<cur; j++){
        //         System.out.print(graph[i][j]+" ");
        //     }
        //     System.out.println();
        // }

        double[] res=new double[queries.size()];
        for(int i=0; i<queries.size(); i++){
            List<String> a=queries.get(i);
            String b=a.get(0);
            String c=a.get(1);
            if(!node.containsKey(b) || !node.containsKey(c)) res[i]=-1;
            else res[i]=dfs(node.get(b),node.get(c),graph,new boolean[cur]);
        }

        return res;
    }

    double dfs(int a, int b, double[][] graph, boolean[] visited){
        visited[a]=true;
        if(graph[a][b]!=-1) return graph[a][b];

        for(int i=0; i<graph.length; i++){
            if(!visited[i] && graph[a][i]!=-1){
                double res=dfs(i,b,graph,visited);
                if(res!=-1){
                    return (graph[a][i]*res);
                }
            }
        }

        return -1;
    }
}