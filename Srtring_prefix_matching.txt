class Solution {
    public int strStr(String haystack, String needle) {
        if (needle.isEmpty()) return 0;
        if (needle.length() > haystack.length()) return -1;

        int[] lps = buildLPS(needle);
        int i = 0, j = 0; // i -> haystack, j -> needle

        while (i < haystack.length()) {
            if (haystack.charAt(i) == needle.charAt(j)) {
                i++; j++;
                if (j == needle.length()) return i - j; // match
            } else {
                if (j > 0) j = lps[j - 1];
                else i++;
            }
        }
        return -1;
    }

    private int[] buildLPS(String p) {
        int m = p.length();
        int[] lps = new int[m];
        int len = 0; // length of the previous longest prefix-suffix
        for (int i = 1; i < m; ) {
            if (p.charAt(i) == p.charAt(len)) {
                lps[i++] = ++len;
            } else if (len > 0) {
                len = lps[len - 1]; // fallback in pattern
            } else {
                lps[i++] = 0;
            }
        }
        return lps;
    }
}




class Solution {
    public int strStr(String haystack, String needle) {
        if(haystack.contains(needle)){
            return haystack.indexOf(needle);
        }
        return -1;
    }
}