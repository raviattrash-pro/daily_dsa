class Solution {
    static {
        for (int i = 0; i < 500; i++)
            minSubArrayLen(1, new int[] { 0, 0, 0, 0 });
    }

    public static int minSubArrayLen(int target, int[] nums) {
        int sum = 0;
        int left = 0;
        int min = Integer.MAX_VALUE;
        for (int right = 0; right < nums.length; right++) {
            sum += nums[right];
            while (sum >= target) {
                min = Math.min(min, right - left + 1);
                sum -= nums[left];
                left++;
            }
        }
        return min == Integer.MAX_VALUE ? 0 : min;
    }

}

class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int n = nums.length;
        int[] prefix = new int[n + 1];

        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }

        int minLen = Integer.MAX_VALUE;

        for (int i = 0; i < n; i++) {
            int required = target + prefix[i];
            int bound = Arrays.binarySearch(prefix, required);

            if (bound < 0) {
                bound = -bound - 1; // insertion point
            }

            if (bound <= n) {
                minLen = Math.min(minLen, bound - i);
            }
        }

        return minLen == Integer.MAX_VALUE ? 0 : minLen; 
    }
}