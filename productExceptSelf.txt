class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] answer = new int[n];
        answer[0] = 1;
        for (int i = 1; i < n; i++) {
            answer[i] = answer[i - 1] * nums[i - 1];
        }
        int suffix = 1;
        for (int i = n - 1; i >= 0; i--) {
            answer[i] *= suffix;
            suffix *= nums[i];
        }
       return answer;
    }
}

class Solution {
    public int[] productExceptSelf(int[] nums) {
         int[] output = new int[nums.length];
        for(int i = 0; i<nums.length; i++){
            output[i] = 1;
        }
        int left =1;
        for(int i=0; i<nums.length;i++){
            output[i] = left;
            left *= nums[i];
        }
        int right = 1;
        for(int i = nums.length-1; i>=0; i--){
            output[i] *= right;
            right *= nums[i];
        }

    return output;
    }
}

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] ans = new int[n];
        
        // Initialize result with 1s
        for (int i = 0; i < n; i++) ans[i] = 1;

        int prefix = 1, suffix = 1;

        for (int i = 0; i < n; i++) {
            // Multiply prefix product
            ans[i] *= prefix;
            prefix *= nums[i];

            // Multiply suffix product (from other end)
            ans[n - 1 - i] *= suffix;
            suffix *= nums[n - 1 - i];
        }

        return ans;
    }
}

