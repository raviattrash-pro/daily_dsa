class Solution {
    public List<String> fullJustify(String[] words, int maxWidth) {
        List<String> res = new ArrayList<>();
        int i = 0, n = words.length;

        while (i < n) {
            int j = i, lineLen = 0;

            // Greedily take as many words as possible for this line
            while (j < n && lineLen + words[j].length() + (j - i) <= maxWidth) {
                lineLen += words[j].length();
                j++;
            }

            int gaps = j - i - 1;
            StringBuilder line = new StringBuilder();

            // Case 1: Last line OR only one word â†’ left-justified
            if (j == n || gaps == 0) {
                for (int k = i; k < j; k++) {
                    line.append(words[k]);
                    if (k < j - 1) line.append(" ");
                }
                // pad spaces at end
                while (line.length() < maxWidth) line.append(" ");
            } 
            // Case 2: Fully justified
            else {
                int spaces = (maxWidth - lineLen) / gaps;
                int extra = (maxWidth - lineLen) % gaps;

                for (int k = i; k < j; k++) {
                    line.append(words[k]);
                    if (k < j - 1) {
                        // distribute evenly + extra to left gaps
                        for (int s = 0; s < spaces; s++) line.append(" ");
                        if (extra-- > 0) line.append(" ");
                    }
                }
            }

            res.add(line.toString());
            i = j; // move to next line
        }

        return res;
    }
}
